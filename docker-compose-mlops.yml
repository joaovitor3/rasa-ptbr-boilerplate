version: "3.4"

# Settings and configurations that are common for all containers
x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2021-09-03T03-56-13Z
  command: server --console-address ":9001" http://minio{1...2}/data{1...2}
  expose:
    - "9000"
    - "9001"
  environment:
    MINIO_ROOT_USER: minio
    MINIO_ROOT_PASSWORD: minio123
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  mlflow-ui:
    build:
      context: .
      dockerfile: ./docker/mlops.Dockerfile
    env_file:
      - ./env/mlops.env
    networks:
      - mlops-boilerplate
    ports:
      - "5000:5000"
    volumes:
      - ./bot:/usr/src/app/bot/

  # postgres db
  db:
    image: postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_DB=mlflow
      - POSTGRES_USER=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_PASSWORD=postgres
    networks:
      - mlops-boilerplate
    volumes:
      - /mlflow_postgres_data:/var/lib/postgresql/data

  # starts 2 docker containers running minio server instances.
  # using nginx reverse proxy, load balancing, you can access
  # it through port 9000.
  minio1:
    <<: *minio-common
    hostname: minio1
    networks:
      - mlops-boilerplate
    volumes:
      - data1-1:/data1
      - data1-2:/data2

  minio2:
    <<: *minio-common
    hostname: minio2
    networks:
      - mlops-boilerplate
    volumes:
      - data2-1:/data1
      - data2-2:/data2

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - mlops-boilerplate
    depends_on:
      - minio1
      - minio2


volumes:
  mlflow_postgres_data:
  data1-1:
  data1-2:
  data2-1:
  data2-2:

networks:
  mlops-boilerplate:
    driver: "bridge"
    name: mlops-boilerplate
